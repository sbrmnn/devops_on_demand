
function bindCloudinaryElement(){
    $.cloudinary.config({ cloud_name: 'yumfog-com',  api_key: '165496118466817'});
    $('.cloudinary-fileupload').bind('cloudinarydone', function(e, data) {
         renderProfileImagePreview(data.result.public_id)
        return true;
    });

    if($.fn.cloudinary_fileupload !== undefined) {
        $("input.cloudinary-fileupload[type=file]").cloudinary_fileupload();
    }
}

function renderProfileImagePreview(public_id){
    if (Boolean(public_id)){
        <% dim = ProfileImageDimensions.instance %>
        var options = {crop: "<%= dim.crop %>", gravity: "<%= dim.gravity %>", width: <%= dim.width %>, height: <%= dim.height %> }
      $('.profile-image-preview').html(
          $.cloudinary.image(public_id, options)
      );
    }
}


function bindChatroomToRecieveMessages(){
    var viewMsgBtns = $(".view-messages-btn");
    if ( viewMsgBtns.length ) {
        viewMsgBtns.each(function() {
            var target = $(this).data('target');
            var chatroomId = $(this).data('chatroom');
            $(document).on('show.bs.collapse', target, function () {
                renderChatRoomMessages(chatroomId);
            });
        });
    }
}

function subscribeToRooms(){
    var chatroomNames = $(".chat-box");
    if ( chatroomNames.length ) {
        chatroomNames.each(function() {
            subscribeToRoom($( this ).data('chatroom'));
        });
    }
}

function broadcastMessage(chatroomId){
    var roomId = chatroomId;
    var messageInput = $('.write_msg[data-chatroom="'+ chatroomId +'"]');
    var message = messageInput.val().trim();
    var roomName = 'room' + roomId;
    if (!$.isEmptyObject(message)){
        App[roomName].speak(message);
        messageInput.val('')
    }
}

function renderChatRoomMessages(chatroomId){
    var chatbox = $('.chat-box[data-chatroom="'+ chatroomId +'"]');
    chatbox.empty();
    $.ajax({
        type: "GET",
        dataType: "json",
        url: "/chatrooms/" + chatroomId + "/messages.json",
        success: function(data){
            data.forEach(function(item, key, data) {
                if (Object.is(data.length - 1, key)) {
                    // execute last item logic
                    appendMessageHistory(item['body'], new Date(item['created_at']), item['user_id'], chatroomId, true);
                }else{
                    appendMessageHistory(item['body'], new Date(item['created_at']), item['user_id'], chatroomId, false);

                }
            });
        }
    });
}

function appendMessageHistory(message, time , message_user_id, chatroomId, toBottom){
    var current_user_id = gon.current_user_id;
    var elem = document.getElementById("chatboxID-" + chatroomId);
    if (message_user_id == current_user_id) {
        elem.insertAdjacentHTML( 'beforeend', outgoingMessageHTML(message, time) );
    }else{
        elem.insertAdjacentHTML( 'beforeend', incomingMessageHTML(message, time) );
    }
    if (toBottom === true){
        $(elem).scrollToBottom()
    }
}

function incomingMessageHTML(message, time){
    return '<div class="row py-2">\
               <div class="col-12">\
                <div class="chat bg-yumfog-orange d-inline-block text-dark">\
                 <div class="chat-bubble">\
                   <p class="m-0 chat-text-size">'+ messageWithLineBreak(message) +'</p>\
                   <span class="time_date chat-date-size"> ' + timeString(time) + '</span></div>\
                 </div>\
                </div>\
               </div>\
           </div>';
}

function outgoingMessageHTML(message, time){
    return '<div class="row py-2">\
             <div class="col-12">\
                 <div class="chat bg-white-smoke d-inline-block text-dark pull-right">\
                   <div class="chat-bubble">\
                     <p class="m-0 chat-text-size">'+ messageWithLineBreak(message) +'</p>\
                     <span class="time_date chat-date-size"> ' + timeString(time) + '</span></div>\
                   </div>\
                 </div>\
              </div>\
            </div>';
}

function messageWithLineBreak(message){
    return message.replace(/(.{55})/g, "$1<br>");
}

function timeString(time) {
    return formatAMPM(time)  + '   |   ' + months[time.getMonth()] + ' ' + time.getDate()
}

function taggifyInput(){
    $('#tags').tagsInput();
}


function validateFiles(inputFile){
    var allowedExtension, extError, extErrorMessage, extName, maxExceededMessage, maxFileSize, sizeExceeded;
    maxExceededMessage = 'This file exceeds the maximum allowed file size (8 MB)';
    extErrorMessage = 'Only image file with extension: .jpg, or .png is allowed';
    allowedExtension = ['jpg', 'png'];
    extName = void 0;
    maxFileSize = $(inputFile).data('max-file-size');
    sizeExceeded = false;
    extError = false;
    $.each(inputFile.files, function() {
        if (this.size && maxFileSize && this.size > parseInt(maxFileSize)) {
            sizeExceeded = true;
        }
        extName = this.name.split('.').pop();
        if ($.inArray(extName, allowedExtension) === -1) {
            extError = true;
        }
    });
    if (sizeExceeded) {
        window.alert(maxExceededMessage);
        $(inputFile).val('');
    }
    if (extError) {
        window.alert(extErrorMessage);
        $(inputFile).val('');
    }
};











